Shopping.javaScript :

  <script>
    function handleSignup(event) {
      event.preventDefault();

      const name = document.getElementById("signupName").value.trim();
      const email = document.getElementById("signupEmail").value.trim();
      const phone = document.getElementById("signupPhone").value.trim();
      const username = document.getElementById("signupUsername").value.trim();
      const password = document.getElementById("signupPassword").value.trim();
      const confirm = document.getElementById("signupConfirm").value.trim();

      if (!name || !email || !phone || !username || !password || !confirm) {
        alert("Please fill in all fields.");
        return;
      }

      if (password !== confirm) {
        alert("Passwords do not match.");
        return;
      }

      const user = { name, email, phone, username, password };
      localStorage.setItem("registeredUser", JSON.stringify(user));

      alert("Signup successful! Redirecting to login...");
      window.location.href = "login.html";
    }
     const apiKey = "YOUR_OPENAI_API_KEY"; 

  document.getElementById("chatToggle").addEventListener("click", () => {
    const chatBox = document.getElementById("chatContainer");
    chatBox.classList.toggle("hidden");
  });

  async function sendMessage() {
    const input = document.getElementById("userInput").value.trim();
    if (!input) return;

    const chatLog = document.getElementById("chatLog");
    chatLog.innerHTML += `<p><strong>You:</strong> ${input}</p>`;
    document.getElementById("userInput").value = "";

    try {
      const response = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${apiKey}`
        },
        body: JSON.stringify({
          model: "gpt-3.5-turbo",
          messages: [{ role: "user", content: input }]
        })
      });

      const data = await response.json();
      const aiMessage = data.choices[0].message.content;
      chatLog.innerHTML += `<p><strong>AI:</strong> ${aiMessage}</p>`;
      chatLog.scrollTop = chatLog.scrollHeight;
    } catch (error) {
      chatLog.innerHTML += `<p style="color:red;">Error: ${error.message}</p>`;
    }
  }
    
  </script>


Products.Javascript :


  <script>
    function handleSignup(event) {
      event.preventDefault();

      const name = document.getElementById("signupName").value.trim();
      const email = document.getElementById("signupEmail").value.trim();
      const phone = document.getElementById("signupPhone").value.trim();
      const username = document.getElementById("signupUsername").value.trim();
      const password = document.getElementById("signupPassword").value.trim();
      const confirm = document.getElementById("signupConfirm").value.trim();

      if (!name || !email || !phone || !username || !password || !confirm) {
        alert("Please fill in all fields.");
        return;
      }

      if (password !== confirm) {
        alert("Passwords do not match.");
        return;
      }

      const user = { name, email, phone, username, password };
      localStorage.setItem("registeredUser", JSON.stringify(user));

      alert("Signup successful! Redirecting to login...");
      window.location.href = "login.html";
    }
     const apiKey = "YOUR_OPENAI_API_KEY"; 

  document.getElementById("chatToggle").addEventListener("click", () => {
    const chatBox = document.getElementById("chatContainer");
    chatBox.classList.toggle("hidden");
  });

  async function sendMessage() {
    const input = document.getElementById("userInput").value.trim();
    if (!input) return;

    const chatLog = document.getElementById("chatLog");
    chatLog.innerHTML += `<p><strong>You:</strong> ${input}</p>`;
    document.getElementById("userInput").value = "";

    try {
      const response = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${apiKey}`
        },
        body: JSON.stringify({
          model: "gpt-3.5-turbo",
          messages: [{ role: "user", content: input }]
        })
      });

      const data = await response.json();
      const aiMessage = data.choices[0].message.content;
      chatLog.innerHTML += `<p><strong>AI:</strong> ${aiMessage}</p>`;
      chatLog.scrollTop = chatLog.scrollHeight;
    } catch (error) {
      chatLog.innerHTML += `<p style="color:red;">Error: ${error.message}</p>`;
    }
  }
    
  </script>
</body>
 
   
  </script>

Cart.JavaScript :
 <script>
  const cartItemsContainer = document.getElementById("cartItems");
  const totalPriceElement = document.getElementById("totalPrice");
  const discountElement = document.getElementById("discount");
  const finalAmountElement = document.getElementById("finalAmount");

  let cart = JSON.parse(localStorage.getItem("cart")) || [];

  //  Display cart items
  function updateCartDisplay() {
    cartItemsContainer.innerHTML = "";
    let total = 0;

    cart.forEach((item, index) => {
      total += item.price;

      const itemDiv = document.createElement("div");
      itemDiv.classList.add("cart-item");
      itemDiv.innerHTML = `
        <p><strong>${item.name}</strong> - ₹${item.price}</p>
        <button onclick="removeFromCart(${index})">Remove</button>
      `;
      cartItemsContainer.appendChild(itemDiv);
    });

    const discount = cart.length > 0 ? 0.1 * total : 0; 
    const fee = 20;
    const final = total - discount + fee;

    totalPriceElement.textContent = total.toFixed(2);
    discountElement.textContent = discount.toFixed(2);
    finalAmountElement.textContent = final.toFixed(2);

    updateCartNotification();
  }

  //  Remove item from cart
  function removeFromCart(index) {
    cart.splice(index, 1);
    localStorage.setItem("cart", JSON.stringify(cart));
    updateCartDisplay();
  }

  //  Update cart count badge (on 🛒 icon)
  function updateCartNotification() {
    const cartIcon = document.getElementById("cartCount");
    if (cartIcon) {
      cartIcon.textContent = cart.length;
    }
  }

  //  Place order and store in user-based orderHistory
  function placeOrder() {
    let cart = JSON.parse(localStorage.getItem("cart")) || [];

    if (cart.length === 0) {
      alert("❗ Please add items to your cart before placing the order.");
      return;
    }

    const user = JSON.parse(localStorage.getItem("loggedInUser"));
    if (!user) {
      alert("⚠ Please login first to place an order.");
      return;
    }

    const key = `orderHistory_${user.username}`;
    const orderHistory = JSON.parse(localStorage.getItem(key)) || [];
    const date = new Date().toLocaleString();

    cart.forEach(item => {
      orderHistory.push({ ...item, date: date });
    });

    localStorage.setItem(key, JSON.stringify(orderHistory));
    localStorage.removeItem("cart");

    alert("✅ Order Placed Successfully!");
    location.reload();
  }

  //  Initial call to display cart
  updateCartDisplay();
   const apiKey = "YOUR_OPENAI_API_KEY"; 

  document.getElementById("chatToggle").addEventListener("click", () => {
    const chatBox = document.getElementById("chatContainer");
    chatBox.classList.toggle("hidden");
  });

  async function sendMessage() {
    const input = document.getElementById("userInput").value.trim();
    if (!input) return;

    const chatLog = document.getElementById("chatLog");
    chatLog.innerHTML += `<p><strong>You:</strong> ${input}</p>`;
    document.getElementById("userInput").value = "";

    try {
      const response = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${apiKey}`
        },
        body: JSON.stringify({
          model: "gpt-3.5-turbo",
          messages: [{ role: "user", content: input }]
        })
      });

      const data = await response.json();
      const aiMessage = data.choices[0].message.content;
      chatLog.innerHTML += `<p><strong>AI:</strong> ${aiMessage}</p>`;
      chatLog.scrollTop = chatLog.scrollHeight;
    } catch (error) {
      chatLog.innerHTML += `<p style="color:red;">Error: ${error.message}</p>`;
    }
  }
</script>

Signup.javaScript :

  <script>
    function handleSignup(event) {
      event.preventDefault();

      const name = document.getElementById("signupName").value.trim();
      const email = document.getElementById("signupEmail").value.trim();
      const phone = document.getElementById("signupPhone").value.trim();
      const username = document.getElementById("signupUsername").value.trim();
      const password = document.getElementById("signupPassword").value.trim();
      const confirm = document.getElementById("signupConfirm").value.trim();

      if (!name || !email || !phone || !username || !password || !confirm) {
        alert("Please fill in all fields.");
        return;
      }

      if (password !== confirm) {
        alert("Passwords do not match.");
        return;
      }

      const user = { name, email, phone, username, password };
      localStorage.setItem("registeredUser", JSON.stringify(user));

      alert("Signup successful! Redirecting to login...");
      window.location.href = "login.html";
    }
     const apiKey = "YOUR_OPENAI_API_KEY"; 

  document.getElementById("chatToggle").addEventListener("click", () => {
    const chatBox = document.getElementById("chatContainer");
    chatBox.classList.toggle("hidden");
  });

  async function sendMessage() {
    const input = document.getElementById("userInput").value.trim();
    if (!input) return;

    const chatLog = document.getElementById("chatLog");
    chatLog.innerHTML += `<p><strong>You:</strong> ${input}</p>`;
    document.getElementById("userInput").value = "";

    try {
      const response = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${apiKey}`
        },
        body: JSON.stringify({
          model: "gpt-3.5-turbo",
          messages: [{ role: "user", content: input }]
        })
      });

      const data = await response.json();
      const aiMessage = data.choices[0].message.content;
      chatLog.innerHTML += `<p><strong>AI:</strong> ${aiMessage}</p>`;
      chatLog.scrollTop = chatLog.scrollHeight;
    } catch (error) {
      chatLog.innerHTML += `<p style="color:red;">Error: ${error.message}</p>`;
    }
  }
    
  </script>

Login.JavaScript:

 <script>

     function handleLogin(event) {
      event.preventDefault();

      const username = document.getElementById("loginUsername").value.trim();
      const password = document.getElementById("loginPassword").value.trim();
      const registeredUser = JSON.parse(localStorage.getItem("registeredUser"));

      if (!registeredUser || registeredUser.username !== username || registeredUser.password !== password) {
        alert("Invalid username or password.");
        return;
      }

      const loggedInUser = {
        name: registeredUser.name,
        email: registeredUser.email,
        phone: registeredUser.phone,
        username: registeredUser.username
      };

      localStorage.setItem("loggedInUser", JSON.stringify(loggedInUser));
      alert("Login successful!");
      window.location.href = "products.html";
    }
     const apiKey = "YOUR_OPENAI_API_KEY"; 

  document.getElementById("chatToggle").addEventListener("click", () => {
    const chatBox = document.getElementById("chatContainer");
    chatBox.classList.toggle("hidden");
  });

  async function sendMessage() {
    const input = document.getElementById("userInput").value.trim();
    if (!input) return;

    const chatLog = document.getElementById("chatLog");
    chatLog.innerHTML += `<p><strong>You:</strong> ${input}</p>`;
    document.getElementById("userInput").value = "";

    try {
      const response = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${apiKey}`
        },
        body: JSON.stringify({
          model: "gpt-3.5-turbo",
          messages: [{ role: "user", content: input }]
        })
      });

      const data = await response.json();
      const aiMessage = data.choices[0].message.content;
      chatLog.innerHTML += `<p><strong>AI:</strong> ${aiMessage}</p>`;
      chatLog.scrollTop = chatLog.scrollHeight;
    } catch (error) {
      chatLog.innerHTML += `<p style="color:red;">Error: ${error.message}</p>`;
    }
  }
    
  </script>

Account.javaScript:

  <script>
    const user = JSON.parse(localStorage.getItem("loggedInUser"));
    const container = document.getElementById("accountDetails");
    const userNameSidebar = document.getElementById("userNameSidebar");

    if (user) {
      container.innerHTML = `
        <label>Mobile Number</label>
        <input type="text" value="${user.phone}" readonly />

        <label>Full Name</label>
        <input type="text" value="${user.name}" readonly />

        <label>Email</label>
        <input type="text" value="${user.email}" readonly />

        <label>Username</label>
        <input type="text" value="${user.username}" readonly />
      `;
      userNameSidebar.textContent = user.name.toLowerCase();
    } else {
      container.innerHTML = "<p>No user logged in.</p>";
    }
    // Load purchase history from localStorage
    function loadPurchaseHistory() {
      const historyContainer = document.getElementById("historyContainer");
      const user = JSON.parse(localStorage.getItem("loggedInUser"));
      const key = `orderHistory_${user.username}`;
      const orders = JSON.parse(localStorage.getItem(key)) || [];


      if (orders.length === 0) {
        historyContainer.innerHTML = "<p>No purchase history available.</p>";
        return;
      }

      orders.forEach(order => {
        const item = document.createElement("div");
        item.classList.add("history-item");
        item.innerHTML = `
          <strong>${order.name}</strong> - ₹${order.price} <br>
          <small>Purchased on: ${order.date}</small>
          <hr>
        `;
        historyContainer.appendChild(item);
      });
    }

    loadPurchaseHistory();
     const apiKey = "YOUR_OPENAI_API_KEY"; 

  document.getElementById("chatToggle").addEventListener("click", () => {
    const chatBox = document.getElementById("chatContainer");
    chatBox.classList.toggle("hidden");
  });

  async function sendMessage() {
    const input = document.getElementById("userInput").value.trim();
    if (!input) return;

    const chatLog = document.getElementById("chatLog");
    chatLog.innerHTML += `<p><strong>You:</strong> ${input}</p>`;
    document.getElementById("userInput").value = "";

    try {
      const response = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${apiKey}`
        },
        body: JSON.stringify({
          model: "gpt-3.5-turbo",
          messages: [{ role: "user", content: input }]
        })
      });

      const data = await response.json();
      const aiMessage = data.choices[0].message.content;
      chatLog.innerHTML += `<p><strong>AI:</strong> ${aiMessage}</p>`;
      chatLog.scrollTop = chatLog.scrollHeight;
    } catch (error) {
      chatLog.innerHTML += `<p style="color:red;">Error: ${error.message}</p>`;
    }
  }
  </script>